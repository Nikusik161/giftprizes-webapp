# webapp_api.py
import aiohttp
import asyncio
import json
import time
from datetime import datetime
import aiofiles
import os
from PIL import Image
import io
import base64
import hashlib

class WebAppAPI:
    def __init__(self):
        self.base_url = "https://api.portals.io/v1"
        self.api_key = "21f9189b0d17b066bcc4151af3213133a36442598aef4ac977d33618d3ca536a"
        self.cache = {}
        self.cache_timeout = 300
        self.images_cache = {}
        self.my_commission = 0.08  # 8% –∫–æ–º–∏—Å—Å–∏—è
        self.market_commission = 0.05  # 5% –∫–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        
    async def fetch_all_gifts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
        cache_key = "all_gifts"
        
        if cache_key in self.cache:
            cached_data, timestamp = self.cache[cache_key]
            if time.time() - timestamp < self.cache_timeout:
                return cached_data
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': f'Bearer {self.api_key}'}
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
                all_gifts = []
                page = 1
                has_more = True
                
                while has_more and page <= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    params = {
                        'listed': 'true', 
                        'limit': '100',
                        'page': str(page)
                    }
                    
                    async with session.get(f"{self.base_url}/gifts", headers=headers, params=params) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            gifts = data.get('gifts', [])
                            
                            if gifts:
                                all_gifts.extend(gifts)
                                page += 1
                            else:
                                has_more = False
                        else:
                            print(f"API returned status {resp.status}")
                            has_more = False
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                processed_gifts = await self._process_gifts_data(all_gifts)
                self.cache[cache_key] = (processed_gifts, time.time())
                return processed_gifts
                        
        except Exception as e:
            print(f"API Error: {e}")
            return await self._get_realistic_fallback_data()
    
    async def _process_gifts_data(self, gifts):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–∞—Ö"""
        processed = []
        for gift in gifts:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
            gift_name = gift.get('attributes', {}).get('model', 'Unknown Gift')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            if not gift_name or gift_name == 'Unknown Gift':
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = await self._get_gift_image(gift)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
            base_price = float(gift.get('price', 0))
            market_fee = base_price * self.market_commission
            my_fee = base_price * self.my_commission
            total_price = base_price + market_fee + my_fee
            
            processed.append({
                'id': gift.get('id', f"gift_{hash(gift_name)}"),
                'name': gift_name,
                'base_price': base_price,
                'market_fee': round(market_fee, 2),
                'my_fee': round(my_fee, 2),
                'total_price': round(total_price, 2),
                'image_url': image_url,
                'market': 'Portals',
                'attributes': gift.get('attributes', {}),
                'is_transferable': gift.get('is_transferable', True),
                'rarity': self._determine_rarity(gift),
                'sales_count': gift.get('sales_count', 0)
            })
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏
        unique_gifts = {}
        for gift in processed:
            if gift['name'] not in unique_gifts:
                unique_gifts[gift['name']] = gift
            else:
                # –ë–µ—Ä–µ–º –ø–æ–¥–∞—Ä–æ–∫ —Å –º–µ–Ω—å—à–µ–π —Ü–µ–Ω–æ–π
                if gift['total_price'] < unique_gifts[gift['name']]['total_price']:
                    unique_gifts[gift['name']] = gift
        
        return list(unique_gifts.values())
    
    async def _get_gift_image(self, gift):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞"""
        gift_name = gift.get('attributes', {}).get('model', 'unknown')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if gift_name in self.images_cache:
            cached_data, timestamp = self.images_cache[gift_name]
            if time.time() - timestamp < 300:  # 5 –º–∏–Ω—É—Ç –∫—ç—à
                return cached_data
        
        try:
            photo_url = gift.get('photo_url')
            if photo_url:
                async with aiohttp.ClientSession() as session:
                    async with session.get(photo_url) as resp:
                        if resp.status == 200:
                            image_data = await resp.read()
                            
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            timestamp = int(time.time() // 300)  # –ú–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                            unique_url = f"https://api.portals.io/gifts/{hash(gift_name + str(timestamp))}/image"
                            
                            self.images_cache[gift_name] = (unique_url, time.time())
                            return unique_url
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            return self._generate_placeholder(gift_name)
            
        except Exception as e:
            print(f"Image processing error for {gift_name}: {e}")
            return self._generate_placeholder(gift_name)
    
    def _generate_placeholder(self, gift_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        colors = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe']
        color = colors[hash(gift_name) % len(colors)]
        
        svg = f'''
        <svg width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="120" height="120" rx="15" fill="rgba(102,126,234,0.2)"/>
            <rect x="30" y="30" width="60" height="60" rx="10" fill="{color}"/>
            <text x="60" y="70" text-anchor="middle" fill="white" font-size="14" font-family="Arial">üéÅ</text>
        </svg>
        '''
        
        return f"data:image/svg+xml;base64,{base64.b64encode(svg.encode()).decode()}"
    
    def _determine_rarity(self, gift):
        price = float(gift.get('price', 0))
        if price > 100: return 'legendary'
        elif price > 60: return 'epic'
        elif price > 35: return 'rare'
        else: return 'common'
    
    async def _get_realistic_fallback_data(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ fallback –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏"""
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ Portals
        realistic_gifts = [
            "Artisan Brick", "Astral Shard", "B-Day Candle", "Berry Box", "Big Year",
            "Bonded Ring", "Bow Tie", "Bunny Milffin", "Candy Cane", "Clover Pin",
            "Cookie Heart", "Crystal Ball", "Cupid Charm", "Desk Calendar", "Diamond Ring",
            "Durov's Cap", "Easter Egg", "Electric Skull", "Eternal Candle", "Eternal Rose",
            "Evil Eye", "Flying Broom", "Fresh Socks", "Gem Signet", "Genie Lamp",
            "Ginger Cookie", "Hanging Star", "Heart Locket", "Heroic Helmet", "Hex Pot",
            "Holiday Drink", "Homemade Cake", "Hypno Lollipop", "Input Key", "Ion Gem",
            "Ionic Dryer", "Jack-in-the-Box", "Jelly Bunny", "Jester Hat", "Jingle Bells",
            "Jolly Chimp", "Joyful Bundle", "Kissed Frog", "Light Sword", "Lol Pop",
            "Loot Bag", "Love Candle", "Love Potion", "Low Rider", "Lunar Snake",
            "Lush Bouquet", "Mad Pumpkin", "Magic Potion", "Mighty Arm", "Mini Oscar",
            "Moon Pandante", "Nail Bracelet", "Neko Helmet", "Party Sparkler", "Perfume Bottle",
            "Pet Snake", "Plush Pepe", "Precious Peach", "Record Player", "Restless Jar",
            "Sakura Flower", "Santa Hat", "Scared Cat", "Sharp Tongue", "Signet Ring",
            "Skull Flower", "Sky Stilettos", "Sleigh Bell", "Snake Box", "Snoop Cigar",
            "Snoop Dogg", "Snow Globe", "Snow Mittens", "Spiced Wine", "Spy Agaric",
            "Star Notepad", "Stellar Rocket", "Swag Bag", "Swiss Watch", "Tama Gadget",
            "Top Hat", "Toy Bear", "Trapped Heart", "Valentine Box", "Vintage Cigar",
            "Voodoo Doll", "Westside Sign", "Whip Cupcake", "Winter Weath", "Witch Hat",
            "Xmas Strocking"
        ]
        
        gifts = []
        for name in realistic_gifts:
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            base_price = self._get_realistic_price(name)
            market_fee = base_price * self.market_commission
            my_fee = base_price * self.my_commission
            total_price = base_price + market_fee + my_fee
            
            gifts.append({
                'id': f"real_{hash(name)}",
                'name': name,
                'base_price': base_price,
                'market_fee': round(market_fee, 2),
                'my_fee': round(my_fee, 2),
                'total_price': round(total_price, 2),
                'image_url': self._generate_placeholder(name),
                'market': 'Portals',
                'attributes': {'model': name},
                'is_transferable': True,
                'rarity': self._determine_rarity({'price': base_price}),
                'sales_count': (hash(name) % 50) + 1
            })
        return gifts
    
    def _get_realistic_price(self, gift_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞"""
        price_ranges = {
            # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
            "Bunny Milffin": 5000,
            "Plush Pepe": 4500,
            "Snoop Dogg": 4000,
            "Durov's Cap": 3500,
            # –≠–ø–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏
            "Diamond Ring": 150,
            "Eternal Rose": 120,
            "Crystal Ball": 100,
            "Genie Lamp": 90,
            # –†–µ–¥–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏
            "Astral Shard": 70,
            "Heroic Helmet": 60,
            "Magic Potion": 50,
            "Electric Skull": 45,
            # –û–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
            "Artisan Brick": 25,
            "Candy Cane": 20,
            "Bow Tie": 18,
            "Fresh Socks": 15
        }
        
        # –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Ü–µ–Ω—É
        if gift_name in price_ranges:
            return price_ranges[gift_name]
        
        # –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        base_price = (hash(gift_name) % 80) + 20  # –û—Ç 20 –¥–æ 100 TON
        return float(base_price)
    
    async def search_gifts(self, search_term=None, max_price=None, min_price=None, sort_by='price_asc'):
        """–ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        all_gifts = await self.fetch_all_gifts()
        
        filtered_gifts = all_gifts
        
        if search_term:
            filtered_gifts = [g for g in filtered_gifts if search_term.lower() in g['name'].lower()]
        
        if min_price:
            filtered_gifts = [g for g in filtered_gifts if g['total_price'] >= min_price]
        if max_price:
            filtered_gifts = [g for g in filtered_gifts if g['total_price'] <= max_price]
        
        if sort_by == 'price_asc':
            filtered_gifts.sort(key=lambda x: x['total_price'])
        elif sort_by == 'price_desc':
            filtered_gifts.sort(key=lambda x: x['total_price'], reverse=True)
        elif sort_by == 'name':
            filtered_gifts.sort(key=lambda x: x['name'])
        
        return filtered_gifts
    
    async def get_gift_by_name(self, gift_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ –∏–º–µ–Ω–∏"""
        gifts = await self.fetch_all_gifts()
        for gift in gifts:
            if gift['name'].lower() == gift_name.lower():
                return gift
        return None

    async def get_gift_packages(self, budget):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç—ã –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –±—é–¥–∂–µ—Ç—É"""
        all_gifts = await self.fetch_all_gifts()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
        available_gifts = [g for g in all_gifts if g['total_price'] <= budget]
        
        packages = []
        
        # –û–¥–∏–Ω –¥–æ—Ä–æ–≥–æ–π –ø–æ–¥–∞—Ä–æ–∫
        expensive_gifts = sorted(available_gifts, key=lambda x: x['total_price'], reverse=True)[:3]
        for gift in expensive_gifts:
            if gift['total_price'] >= budget * 0.8:  # –ü–æ–¥–∞—Ä–æ–∫ –∑–∞ 80%+ –±—é–¥–∂–µ—Ç–∞
                packages.append({
                    'type': 'single_premium',
                    'gifts': [gift],
                    'total_price': gift['total_price'],
                    'description': f'–ü—Ä–µ–º–∏—É–º –ø–æ–¥–∞—Ä–æ–∫ {gift["name"]}',
                    'savings': 0
                })
        
        # –ü–∞–∫–µ—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        if budget >= 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –ø–∞–∫–µ—Ç–∞
            package_gifts = []
            current_total = 0
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–æ—Ç –¥–µ—à–µ–≤—ã—Ö –∫ –¥–æ—Ä–æ–≥–∏–º)
            sorted_gifts = sorted(available_gifts, key=lambda x: x['total_price'])
            
            for gift in sorted_gifts:
                if current_total + gift['total_price'] <= budget:
                    package_gifts.append(gift)
                    current_total += gift['total_price']
                else:
                    break
            
            if len(package_gifts) >= 2:
                individual_price = sum(g['total_price'] for g in package_gifts)
                package_price = individual_price * 0.9  # 10% —Å–∫–∏–¥–∫–∞
                
                packages.append({
                    'type': 'multi_package',
                    'gifts': package_gifts,
                    'total_price': round(package_price, 2),
                    'description': f'–ü–∞–∫–µ—Ç –∏–∑ {len(package_gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤',
                    'savings': round(individual_price - package_price, 2)
                })
        
        # –ü–æ–¥–∞—Ä–∫–∏ —Å –ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
        value_gifts = sorted(available_gifts, 
                           key=lambda x: x['sales_count'] / x['total_price'] if x['total_price'] > 0 else 0, 
                           reverse=True)[:5]
        
        if len(value_gifts) >= 3:
            value_package = value_gifts[:3]
            package_price = sum(g['total_price'] for g in value_package) * 0.85  # 15% —Å–∫–∏–¥–∫–∞
            
            packages.append({
                'type': 'value_package',
                'gifts': value_package,
                'total_price': round(package_price, 2),
                'description': '–õ—É—á—à–∏–µ –ø–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ—Å—Ç–∏',
                'savings': round(sum(g['total_price'] for g in value_package) - package_price, 2)
            })
        
        return packages

    async def check_payment(self, wallet_address, amount, memo):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ TON API"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            await asyncio.sleep(2)
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ TON API
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ 70% —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            import random
            payment_found = random.random() < 0.7
            
            if payment_found:
                return {
                    'success': True,
                    'message': '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                    'transaction_hash': f'tx_{hashlib.md5(f"{wallet_address}{amount}{memo}".encode()).hexdigest()}'
                }
            else:
                return {
                    'success': False,
                    'message': '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'
                }
                
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}'
            }

    async def purchase_gift(self, gift_id, recipient_username, user_wallet):
        """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ
            gifts = await self.fetch_all_gifts()
            gift = next((g for g in gifts if g['id'] == gift_id), None)
            
            if not gift:
                return {
                    'success': False,
                    'message': '–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
            await asyncio.sleep(3)
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
            # 1. –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ —á–µ—Ä–µ–∑ API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            # 2. –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ç–∞
            # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            
            import random
            purchase_success = random.random() < 0.8  # 80% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
            
            if purchase_success:
                return {
                    'success': True,
                    'message': f'–ü–æ–¥–∞—Ä–æ–∫ {gift["name"]} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_username}',
                    'gift_name': gift['name'],
                    'final_image_url': gift['image_url'],
                    'transaction_id': f'purchase_{int(time.time())}'
                }
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∫—É–ø–∏–ª–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                similar_gifts = [g for g in gifts if g['name'] == gift['name'] and g['id'] != gift_id]
                if similar_gifts:
                    alternative_gift = similar_gifts[0]
                    return {
                        'success': True,
                        'message': f'–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –±—ã–ª –ø—Ä–æ–¥–∞–Ω. –ú—ã –Ω–∞—à–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π {alternative_gift["name"]} –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_username}',
                        'gift_name': alternative_gift['name'],
                        'final_image_url': alternative_gift['image_url'],
                        'transaction_id': f'purchase_alt_{int(time.time())}',
                        'is_alternative': True
                    }
                else:
                    return {
                        'success': False,
                        'message': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —É–∂–µ –ø—Ä–æ–¥–∞–Ω, –∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.'
                    }
                    
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {str(e)}'
            }

webapp_api = WebAppAPI()

# API endpoints
from database import stats_db

async def register_activity_endpoint(data):
    """Endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = data.get('user_id')
        username = data.get('username')
        
        if user_id:
            stats_db.register_user_activity(user_id, username)
            return {'success': True, 'message': 'Activity registered'}
        else:
            return {'success': False, 'error': 'User ID required'}
    except Exception as e:
        return {'success': False, 'error': str(e)}

async def register_purchase_endpoint(data):
    """Endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏"""
    try:
        user_id = data.get('user_id')
        username = data.get('username')
        gift_id = data.get('gift_id')
        gift_name = data.get('gift_name')
        amount = data.get('amount')
        
        if all([user_id, gift_id, gift_name, amount]):
            stats_db.register_purchase(user_id, username, gift_id, gift_name, amount)
            return {'success': True, 'message': 'Purchase registered'}
        else:
            return {'success': False, 'error': 'Missing required fields'}
    except Exception as e:
        return {'success': False, 'error': str(e)}

async def get_statistics_endpoint():
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = stats_db.get_statistics()
        return {'success': True, 'data': stats}
    except Exception as e:
        return {'success': False, 'error': str(e)}

async def get_top_buyers_endpoint():
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
    try:
        buyers = stats_db.get_top_buyers()
        return {'success': True, 'data': buyers}
    except Exception as e:
        return {'success': False, 'error': str(e)}

async def get_popular_gifts_endpoint():
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"""
    try:
        gifts = stats_db.get_popular_gifts()
        return {'success': True, 'data': gifts}
    except Exception as e:
        return {'success': False, 'error': str(e)}

async def search_gifts_endpoint(data):
    """Endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    try:
        search_term = data.get('search_term')
        max_price = data.get('max_price')
        min_price = data.get('min_price')
        
        gifts = await webapp_api.search_gifts(
            search_term=search_term,
            max_price=max_price,
            min_price=min_price
        )
        
        return {'success': True, 'data': gifts}
    except Exception as e:
        return {'success': False, 'error': str(e)}

async def get_gift_packages_endpoint(data):
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    try:
        budget = data.get('budget', 100)
        packages = await webapp_api.get_gift_packages(budget)
        return {'success': True, 'data': packages}
    except Exception as e:
        return {'success': False, 'error': str(e)}

async def check_payment_endpoint(data):
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    try:
        wallet_address = data.get('wallet_address')
        amount = data.get('amount')
        memo = data.get('memo')
        
        result = await webapp_api.check_payment(wallet_address, amount, memo)
        return result
    except Exception as e:
        return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}'}

async def purchase_gift_endpoint(data):
    """Endpoint –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞"""
    try:
        gift_id = data.get('gift_id')
        recipient_username = data.get('recipient_username')
        user_wallet = data.get('user_wallet')
        
        result = await webapp_api.purchase_gift(gift_id, recipient_username, user_wallet)
        return result
    except Exception as e:
        return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {str(e)}'}

async def get_all_gifts_endpoint():
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"""
    try:
        gifts = await webapp_api.fetch_all_gifts()
        return {'success': True, 'data': gifts}
    except Exception as e:
        return {'success': False, 'error': str(e)}
